public class EulerWinkel {

	public static double eulerWinkelBerechnen(double a[][]) {

		double z[] = { 0, 0, 1 };

		double u1 = a[0][0];
		double u2 = a[1][0];
		double u3 = a[2][0];

		double u[] = { u1, u2, u3 };

		double uStrich[] = { u1, u2, 0 };

		double phi = 0;

		double beta = 0;

		double alpha = 0;

		double xUStrich[] = new double[3];
		
		double x[]={1,0,0};

		for (int i = 0; i < u.length; i++) {

			xUStrich[i] = x[i] * uStrich[i];

		}

		double xBetrag = Math.sqrt(u1 + u2 + u3);
		
		double xDachBetrag = Math.sqrt(1+0+0);

		double uStrichBetrag = Math.sqrt(u1 + u2 + 0);
		

		double xUstrichVerrechnet = xUStrich[0] + xUStrich[1] + xUStrich[2];
		
		System.out.println(xUstrichVerrechnet);
		
		System.out.println(xUstrichVerrechnet / (xDachBetrag * uStrichBetrag));

		phi = Math.toDegrees(Math.acos(xUstrichVerrechnet / (xDachBetrag * uStrichBetrag)));

		beta = Math.toDegrees(Math.acos(xUstrichVerrechnet / (xBetrag * uStrichBetrag)));

		double k1 = (z[1] * u[2]) - (z[2] * u[1]);

		double k2 = (z[2] * u[0]) - (z[0] * u[2]);

		double k3 = (z[0] * u[1]) - (z[1] * u[0]);

		double kU = k1 * u[0] + k2 * u[1] + k3 * u[2];

		double kBetrag = Math.sqrt((k1 * k1) + (k2 * k2) + (k3 * k3));

		double uBetrag = Math.sqrt((u[0] * u[0]) + (u[1] * u[1]) + (u[2] * u[2]));

		alpha = Math.toDegrees(Math.acos(kU / (kBetrag * uBetrag)));

		// double [][]drehungZ={{Math.cos(phi), -Math.sin(phi), 0},
		// {Math.sin(phi), Math.cos(phi), 0},
		// {0,0,1}
		// };

		// double [][]drehungY={{Math.cos(beta), 0, Math.sin(beta)},
		// { 0, 1, 0},
		// {-Math.sin(beta), 0, Math.cos(beta)}
		// };

		// double [][]drehungX={{ 1, 0, 0},
		// { 0, Math.cos(alpha), -Math.sin(alpha)},
		// {0, Math.sin(alpha), Math.cos(alpha)}
		// };

		return alpha;

	}
}
